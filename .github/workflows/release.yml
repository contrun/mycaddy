on:
  push:
    branches:
      - release
      - main
  release:
    types: [created]

permissions:
    contents: write
    packages: write

jobs:
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v4

    - uses: DeterminateSystems/nix-installer-action@main
      with:
        modify-profile: true
      if: matrix.goos == 'linux'

    - uses: andreygubarev/setup-direnv@v1
      if: matrix.goos == 'linux'

    - uses: wangyoucao577/go-release-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        sha256sum: true
        goos: ${{ matrix.goos }}
        goarch: ${{ matrix.goarch }}
        goversion: "go.mod"
        # TODO: Change ldflags based on the OS
        # https://github.com/golang/go/issues/26492#issuecomment-435462350
        # Add these flags to ldflags so that we can create static binaries.
        # windows: -tags netgo -ldflags '-H=windowsgui -extldflags "-static"'
        # linux/bsd: -tags netgo -ldflags '-extldflags "-static"'
        # macos: -ldflags '-s -extldflags "-sectcreate __TEXT __info_plist Info.plist"'
        # android: -ldflags -s
        # ldflags: -s -w -extldflags -static
        project_path: "./cmd/caddy"
        binary_name: "caddy"
        # If we are releasing an updates then don't overwrite the existing release
        # overwrite overwrites the existing release.
        overwrite: true
        # If we are releasing an updates then set release_tag to be null,
        # otherwise if the branch name is "main" then set the release_tag to be "latest",
        # otherwise set the release_tag to be "dev".
        release_tag: ${{ (github.event_tag == 'release' && null) || (github.ref == 'refs/heads/main' && 'latest' || 'dev') }}
