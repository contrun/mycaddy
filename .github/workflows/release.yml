on:
  push:
    branches:
      - release
      - main
  release:
    types: [created]

env:
    CGO_ENABLED: 0
    DEV_SHELL_NAME: ci

permissions:
    contents: write
    packages: write

jobs:
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v4

    - uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
      if: matrix.goos == 'linux'

    - uses: JRMurr/direnv-nix-action@v4.1.0
      with:
        install-nix: "false"
      if: matrix.goos == 'linux'

    - uses: actions/setup-go@v5
      if: matrix.goos != 'linux'
      
    - name: Build
      run: |
        export GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }}
        BINARY_NAME="caddy-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [[ ${{ matrix.goos }} == "linux" ]] && [[ ${{ matrix.goarch }} == "amd64" ]] ; then
          go build -v -o "$BINARY_NAME.fat" ./cmd/caddy
          objcopy --only-keep-debug "$BINARY_NAME.fat" "$BINARY_NAME.debug"
          objcopy --strip-debug --add-gnu-debuglink="$BINARY_NAME.debug" "$BINARY_NAME.fat" "$BINARY_NAME"
        else
          export ldflags="${ldflags:--s -w}"
          go build -v -o "$BINARY_NAME" ./cmd/caddy
        fi

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        # If we are releasing an updates then set release_tag to be null,
        # otherwise if the branch name is "main" then set the release_tag to be "latest",
        # otherwise set the release_tag to be "dev".
        tag_name: ${{ (github.event_tag == 'release' && null) || (github.ref == 'refs/heads/main' && 'latest' || 'dev') }}
        files: |
          caddy*
        make_latest: ${{ github.ref == 'refs/heads/main' }}
