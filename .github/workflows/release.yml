on:
  push:
    branches:
      - release
      - main
  release:
    types: [created]

env:
    CGO_ENABLED: 0
    DEV_SHELL_NAME: ci

permissions:
    contents: write
    packages: write

jobs:
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v4

    - uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
      if: matrix.goos == 'linux'

    - uses: JRMurr/direnv-nix-action@v4.1.0
      with:
        install-nix: "false"
      if: matrix.goos == 'linux'

    - uses: actions/setup-go@v5
      if: matrix.goos != 'linux'
      
    - name: Build
      run: |
        if [ ${{ matrix.goos }} == "linux" ]; then
          go build -v -o caddy.fat ./cmd/caddy
          objcopy --only-keep-debug caddy.fat caddy.debug
          objcopy --strip-debug --add-gnu-debuglink=caddy.debug caddy.fat caddy
        else
          export ldflags="${ldflags:--s -w}"
          go build -v ./cmd/caddy
        fi
